{
  "openapi": "3.0.1",
  "info": {
    "title": "Monadic ARQ",
    "description": "Monadic ARQ project documentation",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@monadic.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://us-central1-dooloop-f19f1.cloudfunctions.net"
    },
    {
      "url": "http://us-central1-dooloop-f19f1.cloudfunctions.net"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication service",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "pools",
      "description": "Everything about your Pools",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "users",
      "description": "Everything about your users",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "towers",
      "description": "Everything about your Towers",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "roles",
      "description": "Everything about your roles",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "security": [],
        "tags": [
          "auth"
        ],
        "summary": "Signup",
        "description": "Signup",
        "operationId": "signup",
        "requestBody": {
          "description": "Sign up the user and get the token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/auth/login": {
      "post": {
        "security": [],
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "Login",
        "operationId": "login",
        "requestBody": {
          "description": "Get the token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get all the roles",
        "description": "Retrieve all the roles in the DB",
        "operationId": "getRoles",
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Add a new role",
        "description": "Store a new role in the DB",
        "operationId": "addRole",
        "requestBody": {
          "description": "Role object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/roles/{roleId}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Find roles by ID",
        "description": "Returns a single role",
        "operationId": "getRoleById",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "ID of role to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Role not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "roles"
        ],
        "summary": "Update an existing role",
        "description": "Update an existing role",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "ID of role to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Role object that needs to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Role not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Deletes a role",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Role id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Role not found",
            "content": {}
          }
        }
      }
    },
    "/towers": {
      "get": {
        "tags": [
          "towers"
        ],
        "summary": "Get all the towers",
        "description": "Retrieve all the towers in the DB",
        "operationId": "getTowers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "towers"
        ],
        "summary": "Add a new tower",
        "description": "Store a new tower in the DB",
        "operationId": "addTower",
        "requestBody": {
          "description": "Tower object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tower"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/towers/{towerId}": {
      "get": {
        "tags": [
          "towers"
        ],
        "summary": "Find tower by ID",
        "description": "Returns a single tower",
        "operationId": "getTowerById",
        "parameters": [
          {
            "name": "towerId",
            "in": "path",
            "description": "ID of tower to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tower"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Tower not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "towers"
        ],
        "summary": "Update an existing tower",
        "description": "Update an existing tower",
        "operationId": "updateTower",
        "parameters": [
          {
            "name": "towerId",
            "in": "path",
            "description": "ID of tower to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Tower object that needs to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tower"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Tower not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "towers"
        ],
        "summary": "Deletes a tower",
        "operationId": "deleteTower",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "towerId",
            "in": "path",
            "description": "Tower id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Tower not found",
            "content": {}
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all the users",
        "description": "Retrieve all the users in the DB",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a new user",
        "description": "Store a new user in the DB",
        "operationId": "addUser",
        "requestBody": {
          "description": "User object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update an existing user",
        "description": "Update an existing user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User object that needs to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },
    "/pools": {
      "get": {
        "tags": [
          "pools"
        ],
        "summary": "Get all the pools",
        "description": "Retrieve all the pools in the DB",
        "operationId": "getPools",
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pools"
        ],
        "summary": "Add a new pool",
        "description": "Store a new pool in the DB",
        "operationId": "addPool",
        "requestBody": {
          "description": "Pool object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pool"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pools/{poolId}": {
      "get": {
        "tags": [
          "pools"
        ],
        "summary": "Find pool by ID",
        "description": "Returns a single pool",
        "operationId": "getPoolById",
        "parameters": [
          {
            "name": "poolId",
            "in": "path",
            "description": "ID of pool to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pool"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "pools"
        ],
        "summary": "Update an existing pool",
        "description": "Update an existing pool",
        "operationId": "updatePool",
        "parameters": [
          {
            "name": "poolId",
            "in": "path",
            "description": "ID of pool to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pool object that needs to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pool"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Pool not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "pools"
        ],
        "summary": "Deletes a pool",
        "operationId": "deletePool",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "poolId",
            "in": "path",
            "description": "Pool id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Pool not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Signup": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          }
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "endpointId": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "Tower": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "idsAreasComunes": {
            "type": "string"
          },
          "numberApartments": {
            "type": "integer"
          },
          "amenidades": {
            "type": "string"
          },
          "numberFloors": {
            "type": "integer"
          },
          "services": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "areasComunes": {
            "type": "string"
          },
          "numberCajones": {
            "type": "integer"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "rol_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Pool": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
